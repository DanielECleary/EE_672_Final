#include <iostream>
#include <string>

using namespace std;

// TODO: Statements to determine if the modifiers are needed based
// on history, output for if you win/lose, way to tracks wins and losses

// set up intial weights
int rock = 1;
int paper = 1;
int scissors = 1;
int roles = 3;
// initial weights for history probability choices
int rsp = 1;
int sss = 1;
int ssc = 1;
int rsproles = 2;
int sssroles = 2;
// modified value for roles based on found patterns, default to 0 and changed as needed
int rmod = 0;
int pmod = 0;
int smod = 0;
//modifiers for history based probabilities
// probabilities for the three choices
float rchance = 0.0;
float pchance = 0.0;
float schance = 0.0;
float probchoice = 0.0; // this is the value we reference for each run of the game, equals probability func
float strathistory = 0.0; // holds last probability for use in the history component
float rspchance = 0.0;
float ssschance = 0.0;

string choice = "";
string botchoice = "";
string history[3] = {"", "", ""};

// keep trakc sof player vs bot wins
int botwins = 0;
int playerwins = 0;

float probability(){ // random probability generator
    float num = rand();
    while ( num >= 1.0e+9){ // reroll if number is too high
        num = rand();
    }
    if (num <= 0) // rand picked a negative number
        num *= -1;
    int n = 10;
    while (num/n >= 1.0){
        n *= 10; // keep dividing by 10^i until we get a value between 0 and 1, where i is the number of runs
    }
    return num/n;
}

int main(){
    cout << "Welcome to a Rock Paper Scissors Bot!" << endl;
    cout << "Please enter r for rock, p for paper, or s for scissors. To end the game, type end: ";
    cin >> choice;
    while (choice != "end"){ // until the chose end play the game
        //reset modifier values at the start of each game
        rmod = 0;
        pmod = 0;
        smod = 0;
        if (choice != "r" && choice != "p" && choice != "s"){ // failed to pick proper role
            cout << "invalid choice" << endl;
        }
        else{ // game is played
            if (choice == "r"){ //update rock and roles
                rock ++;
                roles++;
            }
            if (choice == "p"){ // update paper and roles
                paper ++;
                roles++;
            }
            if (choice == "s"){ // update scissors and roles
                scissors ++;
                roles++;
            }
            
            // keep track of history
            history[2] = history[1]; // oldest choice
            history[1] = history[0];
            history[0] = choice; // newest choice
            
            // check history to determine mod values
            // rock, scissors, paper strat, pattern was seen so increase chance of modifying to chose the last one seen
            if (history[2] == "r" && history[1] == "s" && history[0] == "p"){ // rsp occured
                rsp ++;
                rsproles ++;
            }
            if (history[2] == "r" && history[1] == "s" && history[0] != "p"){ // rss or rsr occured
                rsproles ++;
            }
            if (history[2] == "s" && history[1] == "p" && history[0] == "r"){ // spr occured
                rsp ++;
                rsproles ++;
            }
            if (history[2] == "s" && history[1] == "p" && history[0] != "r"){ // sps or spp occured
                rsproles ++;
            }
            if (history[2] == "p" && history[1] == "r" && history[0] == "s"){ // prs occured
                rsp ++;
                rsproles ++;
            }
            if (history[2] == "p" && history[1] == "r" && history[0] != "s"){ // prp or prr occured
                rsproles ++;
            }
            rspchance = rsp / rsproles; // set probability choice for rsp strat
            // random determine chance range that it picks the value
            if (history[1] == "r" && history[0] == "p"){ // increase s chance
                if (strathistory > 0.0 && strathistory <= rspchance){
                    smod = 2 * roles;
                }
            }
            if (history[1] == "p" && history[0] == "s"){ // increase r chance
                if (strathistory > 0.0 && strathistory <= rspchance){
                    rmod = 2 * roles;
                }
            }
            if (history[1] == "s" && history[0] == "r"){ // increase p chance
                if (strathistory > 0.0 && strathistory <= rspchance){
                    pmod = 2 * roles;
                }
            }
            // same, same, same strat vs same, same, counter strat
            
            
            //set probability for the stage and modified probabilites based on history
            probchoice = probability();
            strathistory = probchoice;
            rchance = (rock + rmod) / (roles + rmod);
            pchance = (paper + pmod) / (roles + pmod);
            schance = (scissors + smod) / (roles + smod);
            
            // bot choices
            if (probchoice > 0.0 && probchoice <= rchance){ // bot picks rock
                botchoice = "r";
            }
            if (probchoice > rchance && probchoice <= rchance + pchance){ // bot picks paper
                botchoice = "p";
            }
            if (probchoice > rchance + pchance && probchoice <= rchance + pchance + schance){ // bot picks scissors
               botchoice = "s"; 
            }
            
            // determine outcome of game
            // bot wins
            if (choice == "r" && botchoice == "p"){
                cout << "The bot wins!" << endl;
                botwins ++;
            }
            if (choice == "p" && botchoice == "s"){
                cout << "The bot wins!" << endl;
                botwins ++;    
            }
            if (choice == "s" && botchoice == "r"){
                cout << "The bot wins!" << endl;
                botwins ++;
            }
            // player wins
            if (choice == "r" && botchoice == "s"){
                cout << "You win!" << endl;
                playerwins++;
            }
            if (choice == "p" && botchoice == "r"){
                cout << "You win!" << endl;
                playerwins++;
            }
            if (choice == "s" && botchoice == "p"){
                cout << "You win!" << endl;
                playerwins++;
            }
            // tie
            if (choice == botchoice){
                cout << "Draw!" << endl;
            }
        }
        cout << "Please enter r for rock, p for paper, or s for scissors. To end the game, type end: "; // repeat loop
        cin >> choice;
    }
    cout << "Thanks for playing!";
    return 0;
}
